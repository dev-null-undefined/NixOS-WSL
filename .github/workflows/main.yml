name: 'Build NixOS WSL'

on: [push, pull_request, release]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          install_url: https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20201221_9fab14a/install
          # Configure Nix to enable flakes
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Generate Version
        id: version
        run: |
          TAG_COUNT=$(git rev-list --tags --no-walk --count)                                                                 # Count all tags
          COMMIT_COUNT=$(git rev-list --use-bitmap-index --count $(git rev-list --tags --no-walk --max-count=1)..HEAD)       # Count all commits since the last tag
          NIXOS_VERSION=$(nix-instantiate --eval -E '(import ./.).inputs.nixpkgs.lib.version' | sed -E 's/"(.+\...).*"/\1/') # Get NixOS version from nixpkgs
          NIXOS_VERSION_MS=$(echo $NIXOS_VERSION | sed -E 's/\.0*(.+)/\.\1/')                                                # Remove the leading 0 from the minor version (if it exists)
          NIXOS_WSL_VERSION=${NIXOS_VERSION_MS}.${TAG_COUNT}.${COMMIT_COUNT}                                                 # Compose the NixOS-WSL version number

          echo $NIXOS_WSL_VERSION > ./VERSION
          echo "::set-output name=version::$NIXOS_WSL_VERSION"

      - name: Run checks
        run: |
          nix flake check

      - name: Build tarball
        run: |
          nix build -vL '.#nixosConfigurations.mysystem.config.system.build.tarball'

      - name: Upload tarball
        uses: actions/upload-artifact@v3
        with:
          name: rootfs
          path: result/tarball/nixos-wsl-x86_64-linux.tar.gz

      - name: Build installer
        run: |
          nix build -vL '.#nixosConfigurations.mysystem.config.system.build.installer'

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: result/tarball/nixos-wsl-installer.tar.gz

  launcher:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download installer
        uses: actions/download-artifact@v3
        with:
          name: installer

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[17.2,'

      - name: Set Versions
        env:
          NIXOS_WSL_VERSION: ${{ needs.build.outputs.version }}
        run: |
          ((Get-Content -path .\Launcher\Launcher\Launcher.csproj -Raw) -replace '1.3.3.7',$env:NIXOS_WSL_VERSION) | Set-Content -Path .\Launcher\Launcher\Launcher.csproj
          ((Get-Content -path .\Launcher\Launcher-Appx\Package.appxmanifest -Raw) -replace '1.3.3.7',$env:NIXOS_WSL_VERSION) | Set-Content -Path .\Launcher\Launcher-Appx\Package.appxmanifest

      - name: Build Launcher
        run: cd Launcher; dotnet publish --self-contained -r win-x64 -c Release -p:ContinuousIntegrationBuild=true -p:Deterministic=true --output Launcher\pkg Launcher

      - name: Bundle installer with Launcher
        run: |
          Copy-Item nixos-wsl-installer.tar.gz Launcher\Launcher\pkg\
          Copy-Item nixos-wsl-installer.tar.gz Launcher\Launcher-Appx\

      - name: Upload Launcher
        uses: actions/upload-artifact@v3
        with:
          name: launcher
          path: Launcher/Launcher/pkg

      - name: Build AppX package
        run: cd Launcher; msbuild Launcher-Appx\Launcher-Appx.wapproj /p:Configuration=Release /p:Platform=x64 /p:ContinuousIntegrationBuild=true /p:Deterministic=true

      - name: Sign package
        env:
          APPX_SIGNING_CERT: ${{ secrets.APPX_SIGNING_CERT }}
          CERT_ALGORITHM: ${{ secrets.CERT_ALGORITHM }}
        if: env.APPX_SIGNING_CERT != ''
        run: |
          Write-Output $env:APPX_SIGNING_CERT > appx-cert.b64
          certutil -decode appx-cert.b64 appx-cert.pfx
          &"C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe" sign /fd $env:CERT_ALGORITHM /a /f appx-cert.pfx $(Get-ChildItem -Recurse -Filter "*.msixbundle")[0].FullName

      - name: Upload AppX
        uses: actions/upload-artifact@v3
        with:
          name: appx
          path: Launcher/Launcher-Appx/AppPackages/

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - launcher
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download rootfs
        uses: actions/download-artifact@v3
        with:
          name: rootfs

      - name: Download installer
        uses: actions/download-artifact@v3
        with:
          name: installer

      - name: Download appx
        uses: actions/download-artifact@v3
        with:
          name: appx

      - name: Rename appx
        run: mv */*.msixbundle NixOS-WSL.msixbundle

      - name: Generate checksums
        run: |
          for x in *.tar.gz NixOS-WSL.msixbundle; do
            sha256sum $x > ${x}.sha256
          done

      - name: Attach to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            nixos-wsl-installer.tar.gz
            nixos-wsl-installer.tar.gz.sha256
            NixOS-WSL.msixbundle
            NixOS-WSL.msixbundle.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
