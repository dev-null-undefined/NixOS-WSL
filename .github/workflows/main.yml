name: 'Build NixOS WSL'

on: [push, pull_request, release]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          install_url: https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20201221_9fab14a/install
          # Configure Nix to enable flakes
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run checks
        run: |
          nix flake check

      - name: Build tarball
        run: |
          nix build -vL '.#nixosConfigurations.mysystem.config.system.build.tarball'

      - name: Upload tarball
        uses: actions/upload-artifact@v3
        with:
          name: rootfs
          path: result/tarball/nixos-wsl-x86_64-linux.tar.gz

      - name: Build installer
        run: |
          nix build -vL '.#nixosConfigurations.mysystem.config.system.build.installer'

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: installer
          path: result/tarball/nixos-wsl-installer.tar.gz

  appx:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download installer
        uses: actions/download-artifact@v3
        with:
          name: installer
          path: Launcher/Launcher-Appx/nixos-wsl-installer.tar.gz

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: "[17.2,"

      - name: Build Launcher
        run: cd Launcher; dotnet publish --self-contained -r win-x64 -c Release -p:ContinuousIntegrationBuild=true -p:Deterministic=true --output Launcher\bin Launcher

      - name: Upload Launcher
        uses: actions/upload-artifact@v3
        with:
          name: launcher
          path: Launcher/Launcher/bin

      - name: Build AppX package
        run: cd Launcher; msbuild Launcher-Appx\Launcher-Appx.wapproj /p:Configuration=Release /p:Platform=x64 /p:ContinuousIntegrationBuild=true /p:Deterministic=true

      - name: Sign package
        env:
          APPX_SIGNING_CERT: ${{ secrets.APPX_SIGNING_CERT }}
          CERT_ALGORITHM: ${{ secrets.CERT_ALGORITHM }}
        if: env.APPX_SIGNING_CERT != ''
        run: |
          Write-Output $env:APPX_SIGNING_CERT > appx-cert.b64
          certutil -decode appx-cert.b64 appx-cert.pfx
          &"C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe" sign /fd $env:CERT_ALGORITHM /a /f appx-cert.pfx $(Get-ChildItem -Recurse -Filter "*.msixbundle")[0].FullName

      - name: Upload AppX
        uses: actions/upload-artifact@v3
        with:
          name: appx
          path: Launcher/Launcher-Appx/AppPackages/

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: rootfs

      - uses: actions/download-artifact@v3
        with:
          name: installer

      - name: Generate checksums
        run: |
          for x in *.tar.gz; do
            sha256sum $x > ${x}.sha256
          done

      - name: Attach to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            nixos-wsl-x86_64-linux.tar.gz
            nixos-wsl-x86_64-linux.tar.gz.sha256
            nixos-wsl-installer.tar.gz
            nixos-wsl-installer.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
